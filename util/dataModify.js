const Station = require("../models/station");
const webScrapping = require("./webScrapping");
const Lottery = require("../models/lottery.js");

const findLotteryByStation = async (station, date) => {
  let url = station.baseUrlAPI;
  try {
    let lottery = await Lottery.findOne({ stationId: station._id, date: date });
    if (!isObjEmpty(lottery)) {
      return lottery;
    } else {
      let data = await webScrapping.getData(url, date);
      let imgUrl = await webScrapping.getImg(
        modifyStationNameToUrl(station.name),
        date
      );

      const scrappingLottery = new Lottery({
        stationId: station._id,
        date: date,
        imgUrl: imgUrl,
        result: { ...data },
      });

      const result = await scrappingLottery.save();

      return result;
    }
  } catch (error) {
    console.log(error);
  }
};

const findStation = async (station) => {
  let stations = await Station.find();
  stations = stations.filter((item) => {
    let baseUrlAPI = item.baseUrlAPI;
    return baseUrlAPI.includes(station);
  });

  return stations;
};

const changeObjToArr = (obj) => {
  let searchArr = [];

  for (let item in obj) {
    if (item.includes("jackpot") || item.includes("Num")) {
      searchArr = searchArr.concat(obj[item]);
    }
  }

  return searchArr;
};

const checkTicket = async (ticket, station, date) => {
  try {
    let search = {};
    let northZone = station.baseUrlAPI.includes("mien-bac");
    let results = await findLotteryByStation(station, date);

    let searchObj = results.result;
    let searchArr = changeObjToArr(searchObj);
    let findArr = [];

    for (let i = 2; i <= ticket.length; i++) {
      let searchStr = ticket.slice(ticket.length - i, ticket.length);
      let searchIndex = searchArr.indexOf(searchStr);
      if (searchIndex > -1) {
        findArr.push(searchIndex);
      }
    }

    for (let i = 0; i <= findArr.length; i++) {
      if (northZone) {
        if (findArr[i] === 0) {
          search.jackpot =
            "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i ƒê·∫∑c Bi·ªát üò±ü•≥üòç";
        }

        if (findArr[i] === 1) {
          search.firstNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 1 üò±ü•≥üòç";
        }

        if (findArr[i] === 2 || findArr[i] === 3) {
          search.secondNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 2 üò±ü•≥üòç";
        }

        if (findArr[i] < 11 && findArr[i] > 3) {
          search.thirdNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 3 üò±ü•≥üòç";
        }

        if (findArr[i] > 10 && findArr[i] < 15) {
          search.fourthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 4 üò±ü•≥üòç";
        }

        if (findArr[i] > 14 && findArr[i] < 21) {
          search.fifthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 5 üò±ü•≥üòç";
        }

        if (findArr[i] > 20 && findArr[i] < 24) {
          search.sixthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 6 üò±ü•≥üòç";
        }

        if (findArr[i] > 24) {
          search.seventhNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 7 üò±ü•≥üòç";
        }
      } else {
        if (findArr[i] === 0) {
          search.jackpot =
            "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i ƒê·∫∑c Bi·ªát üò±ü•≥üòç";
        }

        if (findArr[i] === 1) {
          search.fifthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 1 üò±ü•≥üòç";
        }

        if (findArr[i] === 2) {
          search.secondNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 2 üò±ü•≥üòç";
        }

        if (findArr[i] === 3 || findArr[i] === 4) {
          search.thirdNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 3 üò±ü•≥üòç";
        }

        if (findArr[i] > 4 && findArr[i] < 12) {
          search.fourthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 4 üò±ü•≥üòç";
        }

        if (findArr[i] === 12) {
          search.fifthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 5 üò±ü•≥üòç";
        }

        if (findArr[i] > 12 && findArr[i] < 16) {
          search.sixthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 6 üò±ü•≥üòç";
        }

        if (findArr[i] === 16) {
          search.seventhNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 7 üò±ü•≥üòç";
        }

        if (findArr[i] === 17) {
          search.eighthNum = "üëèCh√∫c m·ª´ng B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng gi·∫£i 8 üò±ü•≥üòç";
        }
      }
    }

    if (isObjEmpty(search)) {
      search.fell = "üí™Ch√∫c B·∫°n may m·∫Øn l·∫ßn sau üôÇüôÇüôÇ";
    }

    return {
      search: search,
      id: results.id,
      station: station.name,
      zoneCode: station.zoneCode,
    };
  } catch (error) {
    console.log(error);
  }
};

const isObjEmpty = (obj) => {
  for (var x in obj) {
    return false;
  }
  return true;
};

const translateZoneCode = (zone, direction) => {
  const zoneCode = ["mb01", "mt01", "mn01"];
  const zoneName = ["mi·ªÅn b·∫Øc", "mi·ªÅn trung", "mi·ªÅn nam"];
  let index;

  const zoneCheck = zone.toLowerCase();

  if (direction === "toCode") {
    index = zoneName.indexOf(zoneCheck);
    return zoneCode[index];
  } else {
    index = zoneCode.indexOf(zoneCheck);
    return zoneName[index];
  }
};

// H√†m Th·ªëng K√™ D·ªØ Li·ªáu Theo Th√°ng V·ªõi ƒê·∫ßu V√†o L√† M·ªôt Arry c√°c String Ng√†y Th√°ng NƒÉm
const createMonthStaticData = (data) => {
  const monthObj = createInitialMonthStaticData();

  data.forEach((item) => {
    let monthItem = item.split("/")[1];
    monthObj[monthItem] = monthObj[monthItem] + 1;
  });

  return monthObj;
};

// H√†m Kh·ªüi T·∫°o Object
// Ch·ª©a Key l√† Th√°ng Trong NƒÉm
// Value l√† 0 t∆∞∆°ng ·ª©ng v·ªõi s·ªë l∆∞·ª£ng ban ƒë·∫ßu l√† 0
const createInitialMonthStaticData = () => {
  const monthObj = {};

  for (let i = 1; i < 13; i++) {
    let month;

    if (i < 10) {
      month = "0" + i.toString();
    } else {
      month = i.toString();
    }

    monthObj[month] = 0;
  }

  return monthObj;
};

const modifyStationNameToUrl = (name) => {
  const stationNameArr = [
    "b√¨nh ƒë·ªãnh",
    "gia lai",
    "kh√°nh h√≤a",
    "kon tum",
    "ninh thu·∫≠n",
    "ph√∫ y√™n",
    "qu·∫£ng b√¨nh",
    "qu·∫£ng nam",
    "qu·∫£ng ng√£i",
    "qu·∫£ng tr·ªã",
    "th·ª´a thi√™n hu·∫ø",
    "ƒë√† n·∫µng",
    "ƒë·∫Øk l·∫Øk",
    "ƒë·∫Øk n√¥ng",
    "an giang",
    "b√¨nh d∆∞∆°ng",
    "b√¨nh ph∆∞·ªõc",
    "b√¨nh thu·∫≠n",
    "b·∫°c li√™u",
    "b·∫øn tre",
    "c√† mau",
    "c·∫ßn th∆°",
    "h·∫≠u giang",
    "ki√™n giang",
    "long an",
    "s√≥c trƒÉng",
    "ti·ªÅn giang",
    "tp. h·ªì ch√≠ minh",
    "traÃÄ vinh",
    "t√¢y ninh",
    "vƒ©nh long",
    "v≈©ng t√†u",
    "ƒë√† l·∫°t",
    "ƒë·ªìng nai",
    "ƒë·ªìng th√°p",
    "mi·ªÅn b·∫Øc",
  ];
  const stationUrlString = [
    "binh-dinh",
    "gia-lai",
    "khanh-hoa",
    "kon-tum",
    "ninh-thuan",
    "phu-yen",
    "quang-binh",
    "quang-nam",
    "quang-ngai",
    "quang-tri",
    "thua-thien-hue",
    "da-nang",
    "dak-lak",
    "dak-nong",
    "an-giang",
    "binh-duong",
    "binh-phuoc",
    "binh-thuan",
    "bac-lieu",
    "ben-tre",
    "ca-mau",
    "can-tho",
    "hau-giang",
    "kien-giang",
    "long-an",
    "soc-trang",
    "tien-giang",
    "tp-hcm",
    "tra-vinh",
    "tay-ninh",
    "vinh-long",
    "vung-tau",
    "da-lat",
    "dong-nai",
    "dong-thap",
    "mien-bac",
  ];
  let station = name.toLowerCase();

  let index = stationNameArr.indexOf(station);

  return stationUrlString[index];
};

module.exports = {
  findLotteryByStation,
  findStation,
  changeObjToArr,
  checkTicket,
  isObjEmpty,
  translateZoneCode,
  createMonthStaticData,
  createInitialMonthStaticData,
};
